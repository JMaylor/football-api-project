create table competition (
  competition_code text primary key,
  competition_name text not null unique
);

create table team (
  team_name text primary key
);

create table referee (
  referee_name text primary key
);

create table season (
  season_id integer primary key generated always as identity,
  season_name text not null,
  competition_code text not null references competition(competition_code),

  unique (season_name, competition_code)
);

create table deduction (
  team_name text not null references team(team_name),
  season_id integer not null references season(season_id),
  deduction_amount integer not null check (deduction_amount > 0),

  primary key (team_name, season_id)
);

create table fixture(
  fixture_id integer primary key generated always as identity,
  home_team_name text not null references team(team_name),
  away_team_name text not null references team(team_name),
  fixture_date date not null,
  season_id integer not null references season(season_id), 
  full_time_home_goals integer not null,
  full_time_away_goals integer not null,
  half_time_home_goals integer,
  half_time_away_goals integer,
  referee_name text references referee(referee_name),
  home_shots integer,
  away_shots integer,
  home_shots_on_target integer,
  away_shots_on_target integer,
  home_fouls integer,
  away_fouls integer,
  home_corners integer,
  away_corners integer,
  home_yellows integer,
  away_yellows integer,
  home_reds integer,
  away_reds integer,

  unique (home_team_name, away_team_name, fixture_date)
);

create or replace function season_table(
  p_season_id integer
)
returns table (
  pos integer,
  team_name text,
  played integer,
  won integer,
  drawn integer,
  lost integer,
  goals_for integer,
  goals_against integer,
  goal_difference integer,
  points integer,
  deductions integer
)
language plpgsql
as $$
  declare row_record record;
begin
  create temp table temp_league_table as
  select
    t.team_name as team_name,
    0 as played,
    0 as won,
    0 as drawn,
    0 as lost,
    0 as goals_for,
    0 as goals_against,
    0 as goal_difference,
    0 as points,
    0 as deductions
  from team t;

  for row_record in
    select
      f.home_team_name,
      f.away_team_name,
      f.full_time_home_goals,
      f.full_time_away_goals
    from fixture f
    where f.season_id = p_season_id
  loop
    -- Update home team stats
    update temp_league_table t
    set
      played = t.played + 1,
      goals_for = t.goals_for + row_record.full_time_home_goals,
      goals_against = t.goals_against + row_record.full_time_away_goals,
      goal_difference = t.goal_difference + row_record.full_time_home_goals - row_record.full_time_away_goals,
      won = t.won + case when row_record.full_time_home_goals > row_record.full_time_away_goals then 1 else 0 end,
      drawn = t.drawn + case when row_record.full_time_home_goals = row_record.full_time_away_goals then 1 else 0 end,
      lost = t.lost + case when row_record.full_time_home_goals < row_record.full_time_away_goals then 1 else 0 end,
      points = t.points +
        case when row_record.full_time_home_goals > row_record.full_time_away_goals then 3
              when row_record.full_time_home_goals = row_record.full_time_away_goals then 1
              else 0
        end
    where t.team_name = row_record.home_team_name;

    -- Update away team stats
    update temp_league_table t
    set
      played = t.played + 1,
      goals_for = t.goals_for + row_record.full_time_away_goals,
      goals_against = t.goals_against + row_record.full_time_home_goals,
      goal_difference = t.goal_difference + row_record.full_time_away_goals - row_record.full_time_home_goals,
      won = t.won + case when row_record.full_time_home_goals < row_record.full_time_away_goals then 1 else 0 end,
      drawn = t.drawn + case when row_record.full_time_home_goals = row_record.full_time_away_goals then 1 else 0 end,
      lost = t.lost + case when row_record.full_time_home_goals > row_record.full_time_away_goals then 1 else 0 end,
      points = t.points +
        case when row_record.full_time_home_goals < row_record.full_time_away_goals then 3
              when row_record.full_time_home_goals = row_record.full_time_away_goals then 1
              else 0
        end
    where t.team_name = row_record.away_team_name;
  end loop;

  -- Update the temporary table with deductions
  for row_record in
    select
      d.team_name,
      d.deduction_amount
    from deduction d
    where d.season_id = p_season_id
  loop
    update temp_league_table t
    set
      points = t.points - row_record.deduction_amount,
      deductions = row_record.deduction_amount
    where t.team_name = row_record.team_name;
  end loop;

  return query
  select  (row_number() over (order by tlt.points desc, tlt.goal_difference desc, tlt.goals_for desc))::integer as pos,
          tlt.*
  from temp_league_table tlt
  where tlt.played > 0
  order by tlt.points desc, tlt.goal_difference desc, tlt.goals_for desc;

  drop table if exists temp_league_table;
end;
$$;

create
or replace function head_to_head (primary_team text, secondary_team text) returns table (
  fixture_id integer,
  home_team_name text,
  away_team_name text,
  fixture_date date,
  season_id integer,
  full_time_home_goals integer,
  full_time_away_goals integer,
  referee_name text,
  season_name text,
  competition_code text,
  competition_name text
) language plpgsql as $$
begin
  return query (
    select f.fixture_id,
           f.home_team_name,
           f.away_team_name,
           f.fixture_date,
           f.season_id,
           f.full_time_home_goals,
           f.full_time_away_goals,
           f.referee_name,
           s.season_name,
           c.competition_code,
           c.competition_name
    from fixture f
    left join season s on f.season_id = s.season_id
    left join competition c on s.competition_code = c.competition_code
    where (f.home_team_name = primary_team and f.away_team_name = secondary_team) 
    or    (f.home_team_name = secondary_team and f.away_team_name = primary_team)
    order by f.fixture_date desc
  );
end;
$$;
